@{
    ViewData["Title"] = "Contact";
}
<link rel="stylesheet" href="~/css/speaker.css" />

<div class="main">
    <div class="container">
        <div class="col-sm-12 col-md-12 well" id="content">
            <div class='console-container'><span id='firstLoginTerminal'></span><div class='console-underscore' id='console'>&#95;</div></div>
        </div>
        <center>
            <div class="middle">
                <div id="face" style="display:none">
                    <canvas id="canvas"></canvas>
                    <hr />
                    <div class="camera">
                        <video id="video">Video stream not available.</video>
                        <hr />
                        <button id="startbutton" class="btn btn-primary btn-block">Take photo</button>
                    </div>

                </div>
                <div id="login">
                    <form action="javascript:void(0);" method="get">
                        <fieldset class="clearfix">
                            <p><input type="text" placeholder="Nombre" id="inputName" class="form-control" /> </p>
                            <p><input type="password" placeholder="Password" id="inputPassword" class="form-control" /> </p>
                            <p><button class="btn btn-primary" onclick="loginFirst()">Login</button></p>
                        </fieldset>
                        <div class="clearfix"></div>
                    </form>
                    <div class="clearfix"></div>
                </div>
                <div id="errorEnroll" style="display:none">
                    <img src="~/images/nono.gif" id="nono" alt="LOGO" />
                    <br />
                    <button class="btn btn-primary btn-lg" onclick="volver()">Volver</button>
                </div>
                <div class="card">
                    <div class="card-block" id="terminal">
                    </div>
                </div>
                <div id="continuar" style="display:none">
                    <button class="btn btn-success btn-lg" onclick="navegarFinish()">Continuar</button>
                </div>

            </div>
        </center>
    </div>
</div>


<script>
    consoleText(['Inicia sesión para regalar una tarta al poblado', 'a todo el mundo le gusta las tartas', 'no tardes más, incia sesión', 'INICIA SESIÓN YA!', 'MALDITO HUMANO! METE LAS CREDENCIALES DE UNA VEZ!', '*BIP* Perdona señor, creo que me alteré un poco'], 'firstLoginTerminal', true);

    var terminal = document.getElementById('terminal');
    let nameRef = document.getElementById("inputName");
    let passwordRef = document.getElementById("inputPassword");

    let loginRef = document.getElementById("login");
    let faceLoginRef = document.getElementById("face");
    let errorEnrollRef = document.getElementById("errorEnroll");
    let continuarRef = document.getElementById("continuar");

    var user;
    function loginFirst() {
        var identify = "/api/Login/firstlogin"
        var request = new XMLHttpRequest();

        request.open("POST", identify, true);
        request.setRequestHeader('name', nameRef.value);
        request.setRequestHeader('password', passwordRef.value);

        request.onload = function () {
            console.log("RESPONSE ", request)
            var json = JSON.parse(request.responseText);
            console.log("request respuesta", json);
            if (json.error) {
                terminal.innerHTML = "Ha surgido un error al iniciar sesión, comprueba tu usuario y contraseña";
            } else {
                terminal.innerHTML = "Usuario correcto. Por favor, inicia sesión con voz";
                user = json
                showListFacesClient(user);
            }

        };

        request.send();
    }

    function showListFacesClient(user) {


        loginRef.style.display = "none";
        
        if (user.FaceCount > 0) {
            faceLoginRef.style.display = "block";

            PhotoButton = document.getElementById(`startbutton`);
            PhotoButton.addEventListener('click', function (ev) {
                takepictureClient();
                ev.preventDefault();
            }, false);
            startup();
        } else {
            errorEnrollRef.style.display = "block";
            terminal.innerHTML += "<br /> No tienes los suficientes enrolls :) configura bien tu cuenta."
        }


    }

    function volver() {
        loginRef.style.display = "block";
        errorEnrollRef.style.display = "none";
    }
    function navegarFinish() {
        window.location.href = '/home/finish';
    }

    function callDetectPerson(blob) {
        var identify = "/api/Face/detectPerson"
        var request = new XMLHttpRequest();
        // POST
        request.open("POST", identify, true);
        console.log("USER E42342SSS ", user);
        request.setRequestHeader('Content-Type', 'application/json');
        request.setRequestHeader('personId', user.FaceGuid);
        request.setRequestHeader('face', true);
        request.setRequestHeader('name', user.Name);
        request.setRequestHeader('id', user.Id);



        request.onload = function () {
            var json = JSON.parse(request.responseText);
            console.log("request respuesta", json);
            var terminal = document.getElementById('terminal');
            terminal.innerHTML = JSON.stringify(json);

            if (!json.error) {
               
                continuarRef.style.display = "block";
            }
        };
        request.send(blob);
    }
</script>


<script>
        // The width and height of the captured photo. We will set the
        // width to the value defined here, but the height will be
        // calculated based on the aspect ratio of the input stream.

        var width = 320;    // We will scale the photo width to this
        var height = 0;     // This will be computed based on the input stream

        // |streaming| indicates whether or not we're currently streaming
        // video from the camera. Obviously, we start at false.

        var streaming = false;

        // The various HTML elements we need to configure or control. These
        // will be set by the startup() function.

        var video = null;
        var canvas = null;
        var startbutton = null;

        function startup() {
            video = document.getElementById('video');
            canvas = document.getElementById('canvas');
            startbutton = document.getElementById('startbutton');

            navigator.mediaDevices.getUserMedia({ video: true, audio: false })
                .then(function (stream) {
                    video.srcObject = stream;
                    video.play();
                })
                .catch(function (err) {
                    console.log("An error occurred: " + err);
                });

            video.addEventListener('canplay', function (ev) {
                if (!streaming) {
                    height = video.videoHeight / (video.videoWidth / width);

                    // Firefox currently has a bug where the height can't be read from
                    // the video, so we will make assumptions if this happens.

                    if (isNaN(height)) {
                        height = width / (4 / 3);
                    }

                    video.setAttribute('width', width);
                    video.setAttribute('height', height);
                    canvas.setAttribute('width', width);
                    canvas.setAttribute('height', height);
                    streaming = true;
                }
            }, false);            

            clearphoto();
        }

        // Fill the photo with an indication that none has been
        // captured.

        function clearphoto() {
            var context = canvas.getContext('2d');
            context.fillStyle = "#AAA";
            context.fillRect(0, 0, canvas.width, canvas.height);

            var data = canvas.toDataURL('image/png');
        }

        // Capture a photo by fetching the current contents of the video
        // and drawing it into a canvas, then converting that to a PNG
        // format data URL. By drawing it on an offscreen canvas and then
        // drawing that to the screen, we can change its size and/or apply
        // other changes before drawing it.

    function takepictureClient() {
            var context = canvas.getContext('2d');
            if (width && height) {
                canvas.width = width;
                canvas.height = height;
                context.drawImage(video, 0, 0, width, height);
                var data = canvas.toDataURL('image/png');            
                callDetectPerson(data)
            } else {
                clearphoto();
            }
        }
    

</script>