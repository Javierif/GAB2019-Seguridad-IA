<div class="row col-md-12 custyle">
    <middle>
        <div class="camera">
        <canvas id="canvas"></canvas>
            <video id="video">Video stream not available.</video>
           
        </div>
    </middle>
    <table class="table table-striped custab" id="listFaceUsers">
        <thead>

            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Count Trained</th>
                <th class="text-center">Action</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>
<script>
    var facePerson;
    function showListFaces() {

        let tableRef = document.getElementById("listFaceUsers").getElementsByTagName('tbody')[0];
        var new_tbody = document.createElement('tbody');
        tableRef.parentNode.replaceChild(new_tbody, tableRef)
        listUsers.forEach(user => {
            let newRow = new_tbody.insertRow(-1);
            let newCellId = newRow.insertCell(0);
            let newCellName = newRow.insertCell(1);
            let newCellCount = newRow.insertCell(2);
            let newCellAction = newRow.insertCell(3);

            let newText = document.createTextNode(user.id);
            newCellId.appendChild(newText);
            newText = document.createTextNode(user.name);
            newCellName.appendChild(newText);
            newText = document.createTextNode(user.faceCount);
            newCellCount.appendChild(newText);



            var record = `<button type="button" class="btn btn-primary" id="takePhoto_${user.id}">TomarFoto</button>`
            newCellAction.insertAdjacentHTML('beforeend', record);
            newCellAction.style = "text-align:center;"

            PhotoButton = document.getElementById(`takePhoto_${user.id}`);


            PhotoButton.addEventListener('click', function (ev) {
                takepicture([user.faceGuid,user.name,user.id]);
                ev.preventDefault();
            }, false);           
        })

        startup();
    }

    function callAddFaceToPerson(data, props) {
        var identify = "/api/Face/addFaceToPerson"
        var request = new XMLHttpRequest();
        // POST
        request.open("POST", identify, true);

        request.setRequestHeader('Content-Type', 'application/json');
        request.setRequestHeader('personId', props[0]);
        request.setRequestHeader('face', true);
        request.setRequestHeader('name', props[1]);
        request.setRequestHeader('id', props[2]);

        request.onload = function () {
            var json = JSON.parse(request.responseText);
            console.log("request respuesta", json);
        };
        request.send(data);
    }

</script>


<script>
        // The width and height of the captured photo. We will set the
        // width to the value defined here, but the height will be
        // calculated based on the aspect ratio of the input stream.

        var width = 320;    // We will scale the photo width to this
        var height = 0;     // This will be computed based on the input stream

        // |streaming| indicates whether or not we're currently streaming
        // video from the camera. Obviously, we start at false.

        var streaming = false;

        // The various HTML elements we need to configure or control. These
        // will be set by the startup() function.

        var video = null;
        var canvas = null;
        var photo = null;
        var startbutton = null;

        function startup() {
            video = document.getElementById('video');
            canvas = document.getElementById('canvas');
            photo = document.getElementById('photo');

            navigator.mediaDevices.getUserMedia({ video: true, audio: false })
                .then(function (stream) {
                    video.srcObject = stream;
                    video.play();
                })
                .catch(function (err) {
                    console.log("An error occurred: " + err);
                });

            video.addEventListener('canplay', function (ev) {
                if (!streaming) {
                    height = video.videoHeight / (video.videoWidth / width);

                    // Firefox currently has a bug where the height can't be read from
                    // the video, so we will make assumptions if this happens.

                    if (isNaN(height)) {
                        height = width / (4 / 3);
                    }

                    video.setAttribute('width', width);
                    video.setAttribute('height', height);
                    canvas.setAttribute('width', width);
                    canvas.setAttribute('height', height);
                    streaming = true;
                }
            }, false);

            clearphoto();
        }

        // Fill the photo with an indication that none has been
        // captured.

        function clearphoto() {
            var context = canvas.getContext('2d');
            context.fillStyle = "#AAA";
            context.fillRect(0, 0, canvas.width, canvas.height);

            var data = canvas.toDataURL('image/png');
        }

        // Capture a photo by fetching the current contents of the video
        // and drawing it into a canvas, then converting that to a PNG
        // format data URL. By drawing it on an offscreen canvas and then
        // drawing that to the screen, we can change its size and/or apply
        // other changes before drawing it.

        function takepicture(props) {
            var context = canvas.getContext('2d');
            if (width && height) {
                canvas.width = width;
                canvas.height = height;
                context.drawImage(video, 0, 0, width, height);

                var data = canvas.toDataURL('image/png');
                callAddFaceToPerson(data,props)
            } else {
                clearphoto();
            }
        }
    
</script>